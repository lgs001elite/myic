//
// Generated file, do not edit! Created by nedtool 5.6 from src/packet_frame.msg.
//

#ifndef __PACKET_FRAME_M_H
#define __PACKET_FRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>src/packet_frame.msg:1</tt> by nedtool.
 * <pre>
 * packet packet_frame
 * {
 *     int dest_id;
 *     int source_id;
 *     int sender_id;
 *     int msg_type;
 *     int msg_id;
 *     bool syn_signal;
 *     int origin_slot;
 *     int current_slot;
 *     int scale_slot;
 *     int delay_bias;
 *     int sender_type;
 *     int next_id;
 *     int pass_counter;
 *     int node_state;
 *     int reduce_phase;
 *     simtime_t send_time;
 * }
 * </pre>
 */
class packet_frame : public ::omnetpp::cPacket
{
  protected:
    int dest_id;
    int source_id;
    int sender_id;
    int msg_type;
    int msg_id;
    bool syn_signal;
    int origin_slot;
    int current_slot;
    int scale_slot;
    int delay_bias;
    int sender_type;
    int next_id;
    int pass_counter;
    int node_state;
    int reduce_phase;
    ::omnetpp::simtime_t send_time;

  private:
    void copy(const packet_frame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const packet_frame&);

  public:
    packet_frame(const char *name=nullptr, short kind=0);
    packet_frame(const packet_frame& other);
    virtual ~packet_frame();
    packet_frame& operator=(const packet_frame& other);
    virtual packet_frame *dup() const override {return new packet_frame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getDest_id() const;
    virtual void setDest_id(int dest_id);
    virtual int getSource_id() const;
    virtual void setSource_id(int source_id);
    virtual int getSender_id() const;
    virtual void setSender_id(int sender_id);
    virtual int getMsg_type() const;
    virtual void setMsg_type(int msg_type);
    virtual int getMsg_id() const;
    virtual void setMsg_id(int msg_id);
    virtual bool getSyn_signal() const;
    virtual void setSyn_signal(bool syn_signal);
    virtual int getOrigin_slot() const;
    virtual void setOrigin_slot(int origin_slot);
    virtual int getCurrent_slot() const;
    virtual void setCurrent_slot(int current_slot);
    virtual int getScale_slot() const;
    virtual void setScale_slot(int scale_slot);
    virtual int getDelay_bias() const;
    virtual void setDelay_bias(int delay_bias);
    virtual int getSender_type() const;
    virtual void setSender_type(int sender_type);
    virtual int getNext_id() const;
    virtual void setNext_id(int next_id);
    virtual int getPass_counter() const;
    virtual void setPass_counter(int pass_counter);
    virtual int getNode_state() const;
    virtual void setNode_state(int node_state);
    virtual int getReduce_phase() const;
    virtual void setReduce_phase(int reduce_phase);
    virtual ::omnetpp::simtime_t getSend_time() const;
    virtual void setSend_time(::omnetpp::simtime_t send_time);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const packet_frame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, packet_frame& obj) {obj.parsimUnpack(b);}


#endif // ifndef __PACKET_FRAME_M_H

